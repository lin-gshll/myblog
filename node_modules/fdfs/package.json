{
  "_args": [
    [
      {
        "raw": "fdfs@^1.0.4",
        "scope": null,
        "escapedName": "fdfs",
        "name": "fdfs",
        "rawSpec": "^1.0.4",
        "spec": ">=1.0.4 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Administrator\\Desktop\\www\\node_modules\\ueditor"
    ]
  ],
  "_from": "fdfs@>=1.0.4 <2.0.0",
  "_id": "fdfs@1.0.4",
  "_inCache": true,
  "_location": "/fdfs",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/fdfs-1.0.4.tgz_1487254501447_0.48199866781942546"
  },
  "_npmUser": {
    "name": "ymyang",
    "email": "ymyang@163.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fdfs@^1.0.4",
    "scope": null,
    "escapedName": "fdfs",
    "name": "fdfs",
    "rawSpec": "^1.0.4",
    "spec": ">=1.0.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ueditor"
  ],
  "_resolved": "https://registry.npmjs.org/fdfs/-/fdfs-1.0.4.tgz",
  "_shasum": "c7c46f8b6f70799501a1be37f3e6d93c23a54692",
  "_shrinkwrap": null,
  "_spec": "fdfs@^1.0.4",
  "_where": "C:\\Users\\Administrator\\Desktop\\www\\node_modules\\ueditor",
  "author": {
    "name": "ymyang"
  },
  "bugs": {
    "url": "https://github.com/ymyang/fdfs/issues"
  },
  "dependencies": {
    "bluebird": "^3.4.0",
    "is-type-of": "^1.0.0",
    "lodash": "^4.13.1"
  },
  "description": "FastDFS node client",
  "devDependencies": {
    "mocha": "^2.4.5"
  },
  "directories": {},
  "dist": {
    "shasum": "c7c46f8b6f70799501a1be37f3e6d93c23a54692",
    "tarball": "https://registry.npmjs.org/fdfs/-/fdfs-1.0.4.tgz"
  },
  "gitHead": "aee16a24c1b71ee4bdc725361c57d73107de2521",
  "homepage": "https://github.com/ymyang/fdfs#readme",
  "keywords": [
    "FastDFS",
    "fdfs",
    "node"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ymyang",
      "email": "ymyang@163.com"
    }
  ],
  "name": "fdfs",
  "optionalDependencies": {},
  "readme": "# Nodejs Client for FastDFS\r\n\r\n[FastDFS](https://github.com/happyfish100/fastdfs) 是分布式文件存储系统。这个项目是FastDFS的NodeJS客户端，用来与FastDFS Server进行交互，进行文件的相关操作。我测试过的server版本是4.0.6。\r\n\r\n# 安装\r\n\r\n```shell\r\n\r\nnpm install fdfs\r\n\r\n```\r\n\r\n# 使用\r\n\r\n```javascript\r\n\r\nvar FdfsClient = require('fdfs');\r\n\r\nvar fdfs = new FdfsClient({\r\n    // tracker servers\r\n    trackers: [\r\n        {\r\n            host: 'tracker.fastdfs.com',\r\n            port: 22122\r\n        }\r\n    ],\r\n    // 默认超时时间10s\r\n    timeout: 10000,\r\n    // 默认后缀\r\n    // 当获取不到文件后缀时使用\r\n    defaultExt: 'txt',\r\n    // charset默认utf8\r\n    charset: 'utf8'\r\n});\r\n\r\n```\r\n\r\n以上是一些基本配置，你还可以自定义你的日志输出工具，默认是使用console\r\n例如你要使用[debug](https://github.com/visionmedia/debug)作为你的日志输出工具，你可以这么做：\r\n\r\n```javascript\r\n\r\nvar debug = require('debug')('fdfs');\r\nvar fdfs = new FdfsClient({\r\n    // tracker servers\r\n    trackers: [\r\n        {\r\n            host: 'tracker.fastdfs.com',\r\n            port: 22122\r\n        }\r\n    ],\r\n    logger: {\r\n        log: debug\r\n    }\r\n});\r\n```\r\n\r\n### 上传文件\r\n\r\n注：以下fileId为group + '/' + filename，以下的所有操作使用的fileId都是一样\r\n\r\n通过本地文件名上传\r\n\r\n```javascript\r\n\r\nfdfs.upload('e:/shou.jpg').then(function(fileId) {\r\n    // fileId 为 group + '/' + filename\r\n    console.log(fileId);\r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\n上传Buffer\r\n\r\n```javascript\r\n\r\nvar fs = require('fs');\r\n\r\n// 注意此处的buffer获取方式只为演示功能，实际不会这么去构建buffer\r\nvar buffer = fs.readFileSync('test.gif');\r\nfdfs.upload(buffer).then(function(fileId) {\r\n    // fileId 为 group + '/' + filename\r\n    console.log(fileId);\r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\nReadableStream\r\n\r\n```javascript\r\n\r\nvar fs = require('fs');\r\n\r\nvar rs = fs.createReadStream('test.gif');\r\nfdfs.upload(rs).then(function(fileId) {\r\n    // fileId 为 group + '/' + filename\r\n    console.log(fileId);\r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\n其他一些options，作为第2个参数传入\r\n\r\n```js\r\n\r\nfdfs.upload('test.gif', {\r\n    // 上传方法 [upload, uploadAppender, append, modify], 默认为upload\r\n    method: 'upload',\r\n    // 指定文件存储的group，不指定则由tracker server分配\r\n    group: 'group1',\r\n    // method为append或modify指定追加的源文件\r\n    fileId: 'group1/M00/00/0F/wKgBeFXlZJuAdsBZAAPm5H9JxDA153.jpg',\r\n    // file bytes, file参数为ReadableStream时必须指定\r\n    size: 1024,\r\n    // method为modify指定追加的源文件的起始点\r\n    offset: 10240,\r\n    // 上传文件的后缀，不指定则获取file参数的后缀，不含(.)\r\n    ext: 'jpg'\r\n}).then(function(fileId) {\r\n    // fileId 为 group + '/' + filename\r\n    console.log(fileId);\r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n \r\n```\r\n\r\n### 下载文件\r\n\r\n下载到本地\r\n\r\n```js\r\n\r\nfdfs.download(fileId, 'test_download.gif').then(function() {\r\n    // 下载完成\r\n    \r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\n下载到WritableStream\r\n\r\n```js\r\n\r\nvar fs = require('fs');\r\nvar ws = fs.createWritableStream('test_download.gif');\r\nfdfs.download(fileId, ws).then(function() {\r\n    // 下载完成\r\n    \r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\n下载文件片段\r\n\r\n```js\r\n\r\nfdfs.download(fileId, {\r\n    target: 'test_download.part',\r\n    offset: 5,\r\n    bytes: 5\r\n}).then(function() {\r\n    // 下载完成\r\n    \r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\n### 删除文件\r\n\r\n```js\r\n\r\nfdfs.del(fileId).then(function() {\r\n    // 删除成功\r\n    \r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\n### 获取文件信息\r\n\r\n```js\r\n\r\nfdfs.getFileInfo(fileId).then(function(fileInfo) {\r\n    // fileInfo有4个属性\r\n    // {\r\n    //   // 文件大小\r\n    //   size:\r\n    //   // 文件创建的时间戳，单位为秒\r\n    //   timestamp:\r\n    //   // 校验和\r\n    //   crc32:\r\n    //   // 最初上传到的storage server的ip\r\n    //   addr:\r\n    // }\r\n    console.log(fileInfo);\r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\n### 文件的Meta Data\r\n\r\n设置Meta Data, 我只贴出来文件签名信息吧，flag字段如果不传则默认是O\r\n\r\n```js\r\n\r\n/**\r\n * @param fileId\r\n * @param metaData  {key1: value1, key2: value2}\r\n * @param flag 'O' for overwrite all old metadata (default)\r\n                'M' for merge, insert when the meta item not exist, otherwise update it\r\n */\r\nfdfs.setMetaData(fileId, metaData, flag).then(function() {\r\n    // 设置成功\r\n    \r\n}).catch(function(err) {\r\n    console.error(err);\r\n); \r\n\r\n```\r\n\r\n获取Meta Data\r\n\r\n```js\r\n\r\nfdfs.getMetaData(fileId).then(function(metaData) {\r\n    console.log(metaData);\r\n}).catch(function(err) {\r\n    console.error(err);\r\n);\r\n\r\n```\r\n\r\n### group信息\r\n\r\n```js\r\n\r\nfdfs.listGroups().then(function(groups) {\r\n    console.log(groups);\r\n}).catch(function(err) {\r\n    console.error(err);\r\n); \r\n\r\n```\r\n\r\n### storage信息\r\n\r\n```js\r\n\r\nfdfs.listStorages(‘group1’).then(function(storages) {\r\n    console.log(storages);\r\n}).catch(function(err) {\r\n    console.error(err);\r\n); \r\n\r\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ymyang/fdfs.git"
  },
  "scripts": {
    "test": "echo \"mocha test/FdfsTest.js\""
  },
  "version": "1.0.4"
}
